{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  createLocalAudioTrack,\n  LocalAudioTrack,\n  RemoteAudioTrack,\n  RemoteTrack,\n  Room,\n  RoomEvent,\n  Track,\n} from 'livekit-client';\nimport { ULTRAVOX_SDK_VERSION } from './version.js';\n\n/* The current status of an UltravoxSession. */\nexport enum UltravoxSessionStatus {\n  /* The session is not connected and not attempting to connect. This is the initial state. */\n  DISCONNECTED = 'disconnected',\n  /* The client is disconnecting from the session. */\n  DISCONNECTING = 'disconnecting',\n  /* The client is attempting to connect to the session. */\n  CONNECTING = 'connecting',\n  /* The client is connected to the session and the server is warming up. */\n  IDLE = 'idle',\n  /* The client is connected and the server is listening for voice input. */\n  LISTENING = 'listening',\n  /* The client is connected and the server is considering its response. The user can still interrupt. */\n  THINKING = 'thinking',\n  /* The client is connected and the server is playing response audio. The user can interrupt as needed. */\n  SPEAKING = 'speaking',\n}\n\n/* The participant responsible for an utterance. */\nexport enum Role {\n  USER = 'user',\n  AGENT = 'agent',\n}\n\n/* How a message was communicated. */\nexport enum Medium {\n  VOICE = 'voice',\n  TEXT = 'text',\n}\n\n/** A transcription of a single utterance. */\nexport class Transcript {\n  constructor(\n    /* The possibly-incomplete text of an utterance. */\n    readonly text: string,\n    /* Whether the text is complete or the utterance is ongoing. */\n    readonly isFinal: boolean,\n    /* Who emitted the utterance. */\n    readonly speaker: Role,\n    /* The medium through which the utterance was emitted. */\n    readonly medium: Medium,\n  ) {}\n}\n\n/* Event emitted by an UltravoxSession when its status changes. */\nexport class UltravoxSessionStatusChangedEvent extends Event {\n  constructor() {\n    super('status');\n  }\n}\n\n/* Event emitted by an UltravoxSession when its transcripts change. */\nexport class UltravoxTranscriptsChangedEvent extends Event {\n  constructor() {\n    super('transcripts');\n  }\n}\n\n/* Event emitted by an UltravoxSession when an experimental message is received. */\nexport class UltravoxExperimentalMessageEvent extends Event {\n  constructor(readonly message: any) {\n    super('experimental_message');\n  }\n}\n\n/**\n * Event emitted by an UltravoxSession when any data message is received, including those typically\n * handled by this SDK.\n *\n * See https://docs.ultravox.ai/datamessages for message types.\n */\nexport class UltravoxDataMessageEvent extends Event {\n  constructor(readonly message: any) {\n    super('data_message');\n  }\n}\n\ntype ClientToolReturnType = string | { result: string; responseType: string };\nexport type ClientToolImplementation = (parameters: {\n  [key: string]: any;\n}) => ClientToolReturnType | Promise<ClientToolReturnType>;\n\n/**\n * Manages a single session with Ultravox and emits events to notify consumers of\n * state changes. The following events are emitted:\n *\n * - status: The status of the session has changed.\n * - transcripts: A transcript was added or updated.\n * - experimental_message: An experimental message was received. The message is included in the event.\n *\n */\nexport class UltravoxSession extends EventTarget {\n  private static CONNECTED_STATUSES = new Set([\n    UltravoxSessionStatus.LISTENING,\n    UltravoxSessionStatus.THINKING,\n    UltravoxSessionStatus.SPEAKING,\n  ]);\n\n  private readonly _transcripts: Array<Transcript | null> = [];\n  private _status: UltravoxSessionStatus = UltravoxSessionStatus.DISCONNECTED;\n  private readonly registeredTools: Map<string, ClientToolImplementation> = new Map();\n  private socket?: WebSocket;\n  private room?: Room;\n  private audioElement = new Audio();\n  private localAudioTrack?: LocalAudioTrack;\n  private micSourceNode?: MediaStreamAudioSourceNode;\n  private agentSourceNode?: MediaStreamAudioSourceNode;\n  private delayedSpeakingState = false;\n  private readonly textDecoder = new TextDecoder();\n  private readonly textEncoder = new TextEncoder();\n\n  private readonly audioContext: AudioContext;\n  private readonly experimentalMessages: Set<string>;\n\n  private _isMicMuted: boolean = false;\n  private _isSpeakerMuted: boolean = false;\n\n  /**\n   * Constructor for UltravoxSession.\n   * @param audioContext An AudioContext to use for audio processing. If not provided, a new AudioContext will be created.\n   * @param experimentalMessages A set of experimental message types to enable. Empty by default.\n   */\n  constructor({\n    audioContext,\n    experimentalMessages,\n  }: {\n    audioContext?: AudioContext;\n    experimentalMessages?: Set<string>;\n  } = {}) {\n    super();\n    this.audioContext = audioContext || new AudioContext();\n    this.experimentalMessages = experimentalMessages || new Set();\n  }\n\n  /** Returns all transcripts for the current session. */\n  get transcripts(): Transcript[] {\n    return [...this._transcripts.filter((t) => t != null)] as Transcript[];\n  }\n\n  /** Returns the session's current status. */\n  get status(): UltravoxSessionStatus {\n    return this._status;\n  }\n\n  /**\n   * Indicates whether the user's mic is currently muted for the session. (Does not inspect\n   * hardware state.)\n   */\n  get isMicMuted(): boolean {\n    return this._isMicMuted;\n  }\n\n  /**\n   * Indicates whether the user's speaker (e.g. agent output audio) is currently muted for the\n   * session. (Does not inspect system volume or hardware state.)\n   */\n  get isSpeakerMuted(): boolean {\n    return this._isSpeakerMuted;\n  }\n\n  /**\n   * Registers a client tool implementation with the given name. If the call is\n   * started with a client-implemented tool, this implementation will be invoked\n   * when the model calls the tool.\n   *\n   * See https://docs.ultravox.ai/tools for more information.\n   */\n  registerToolImplementation(name: string, implementation: ClientToolImplementation): void {\n    this.registeredTools.set(name, implementation);\n  }\n\n  /** Convenience batch wrapper for registerToolImplementation. */\n  registerToolImplementations(implementationMap: { [name: string]: ClientToolImplementation }): void {\n    for (const [name, implementation] of Object.entries(implementationMap)) {\n      this.registerToolImplementation(name, implementation);\n    }\n  }\n\n  /** Connects to a call using the given joinUrl. */\n  joinCall(joinUrl: string, clientVersion?: string): void {\n    if (this._status !== UltravoxSessionStatus.DISCONNECTED) {\n      throw new Error('Cannot join a new call while already in a call');\n    }\n    const url = new URL(joinUrl);\n    let uvClientVersion = `web_${ULTRAVOX_SDK_VERSION}`;\n    if (clientVersion) {\n      uvClientVersion += `:${clientVersion}`;\n    }\n    url.searchParams.set('clientVersion', uvClientVersion);\n    url.searchParams.set('apiVersion', '1');\n    if (this.experimentalMessages) {\n      url.searchParams.set('experimentalMessages', Array.from(this.experimentalMessages.values()).join(','));\n    }\n    joinUrl = url.toString();\n    this.setStatus(UltravoxSessionStatus.CONNECTING);\n    this.socket = new WebSocket(joinUrl);\n    this.socket.onmessage = (event) => this.handleSocketMessage(event);\n    this.socket.onclose = (event) => this.handleSocketClose(event);\n  }\n\n  /** Leaves the current call (if any). */\n  async leaveCall(): Promise<void> {\n    await this.disconnect();\n  }\n\n  /**\n   * Sets the agent's output medium. If the agent is currently speaking, this will take effect at\n   * the end of the agent's utterance. Also see muteSpeaker and unmuteSpeaker below.\n   */\n  setOutputMedium(medium: Medium) {\n    if (!UltravoxSession.CONNECTED_STATUSES.has(this._status)) {\n      throw new Error(`Cannot set output medium while not connected. Current status is ${this._status}.`);\n    }\n    this.sendData({ type: 'set_output_medium', medium });\n  }\n\n  /** Sends a message via text. */\n  sendText(text: string) {\n    if (!UltravoxSession.CONNECTED_STATUSES.has(this._status)) {\n      throw new Error(`Cannot send text while not connected. Current status is ${this._status}.`);\n    }\n    this.sendData({ type: 'input_text_message', text });\n  }\n\n  /* Sends an arbitrary data message to the server. See https://docs.ultravox.ai/datamessages for message types. */\n  sendData(obj: any) {\n    if (obj.type == undefined) {\n      throw new Error('Data must have a type field');\n    }\n    const msgStr = JSON.stringify(obj);\n    const msgBytes = this.textEncoder.encode(msgStr);\n    if (msgBytes.length > 1024) {\n      this.socket?.send(msgStr);\n    } else {\n      this.room?.localParticipant.publishData(msgBytes, { reliable: true });\n    }\n  }\n\n  /** Mutes audio input from the user. */\n  muteMic(): void {\n    if (!this.room?.localParticipant) {\n      throw new Error('Cannot muteMic.');\n    }\n    this._isMicMuted = true;\n    this.room.localParticipant.setMicrophoneEnabled(false);\n  }\n\n  /** Unmutes audio input from the user. */\n  unmuteMic(): void {\n    if (!this.room?.localParticipant) {\n      throw new Error('Cannot unmuteMic.');\n    }\n    this._isMicMuted = false;\n    this.room.localParticipant.setMicrophoneEnabled(true);\n  }\n\n  /** Toggles the mute state of the user's audio input. */\n  toggleMicMute(): void {\n    if (!this.room?.localParticipant) {\n      throw new Error('Cannot toggle mic mute.');\n    }\n\n    if (this.isMicMuted) {\n      this.unmuteMic();\n    } else {\n      this.muteMic();\n    }\n  }\n\n  /** Mutes audio output from the agent. */\n  muteSpeaker(): void {\n    if (!this.room?.remoteParticipants) {\n      throw new Error('Cannot muteSpeaker.');\n    }\n    this._isSpeakerMuted = true;\n    this.room.remoteParticipants.forEach((participant) => {\n      participant.audioTrackPublications.forEach((publication) => {\n        publication.track?.setMuted(true);\n      });\n    });\n  }\n\n  /** Unmutes audio output from the agent. */\n  unmuteSpeaker(): void {\n    if (!this.room?.remoteParticipants) {\n      throw new Error('Cannot unmuteSpeaker.');\n    }\n    this._isSpeakerMuted = false;\n    this.room.remoteParticipants.forEach((participant) => {\n      participant.audioTrackPublications.forEach((publication) => {\n        publication.track?.setMuted(false);\n      });\n    });\n  }\n\n  /** Toggles the mute state of the agent's output audio. */\n  toggleSpeakerMute(): void {\n    if (!this.room?.remoteParticipants) {\n      throw new Error('Cannot toggle speaker mute.');\n    }\n\n    if (this.isSpeakerMuted) {\n      this.unmuteSpeaker();\n    } else {\n      this.muteSpeaker();\n    }\n  }\n\n  private async handleSocketMessage(event: MessageEvent) {\n    const msg = JSON.parse(event.data);\n    // We attach the Livekit audio to an audio element so that we can mute the audio\n    // when the agent is not speaking. For now, disable Livekit's WebAudio mixing\n    // to avoid the audio playing twice:\n    //\n    // References:\n    //  - https://docs.livekit.io/guides/migrate-from-v1/#Javascript-Typescript\n    //  - https://github.com/livekit/components-js/pull/855\n    //\n    this.room = new Room({ webAudioMix: false });\n    this.room.on(RoomEvent.TrackSubscribed, (track: RemoteTrack) => this.handleTrackSubscribed(track));\n    this.room.on(RoomEvent.DataReceived, (payload: Uint8Array, participant: any) =>\n      this.handleDataReceived(payload, participant),\n    );\n    const [track, _] = await Promise.all([createLocalAudioTrack(), this.room.connect(msg.roomUrl, msg.token)]);\n    this.localAudioTrack = track;\n    this.localAudioTrack.setAudioContext(this.audioContext);\n\n    if ([UltravoxSessionStatus.DISCONNECTED, UltravoxSessionStatus.DISCONNECTING].includes(this.status)) {\n      // We've been stopped while waiting for the mic permission (during createLocalTracks).\n      await this.disconnect();\n      return;\n    }\n\n    this.audioContext.resume();\n    this.audioElement.play();\n    if (this.localAudioTrack.mediaStream) {\n      this.micSourceNode = this.audioContext.createMediaStreamSource(this.localAudioTrack.mediaStream);\n    }\n\n    const opts = { name: 'audio', simulcast: false, source: Track.Source.Microphone };\n    this.room.localParticipant.publishTrack(this.localAudioTrack, opts);\n    this.setStatus(UltravoxSessionStatus.IDLE);\n  }\n\n  private async handleSocketClose(event: CloseEvent) {\n    await this.disconnect();\n  }\n\n  private async disconnect() {\n    this.setStatus(UltravoxSessionStatus.DISCONNECTING);\n    this.localAudioTrack?.stop();\n    this.localAudioTrack = undefined;\n    await this.room?.disconnect();\n    this.room = undefined;\n    this.socket?.close();\n    this.socket = undefined;\n    this.micSourceNode?.disconnect();\n    this.micSourceNode = undefined;\n    this.agentSourceNode?.disconnect();\n    this.agentSourceNode = undefined;\n    this.audioElement.pause();\n    this.audioElement.srcObject = null;\n    this.setStatus(UltravoxSessionStatus.DISCONNECTED);\n  }\n\n  private handleTrackSubscribed(track: RemoteTrack) {\n    const audioTrack = track as RemoteAudioTrack;\n    audioTrack.attach(this.audioElement);\n    if (track.mediaStream) {\n      this.agentSourceNode = this.audioContext.createMediaStreamSource(track.mediaStream);\n    }\n    if (this.delayedSpeakingState) {\n      this.delayedSpeakingState = false;\n      this.setStatus(UltravoxSessionStatus.SPEAKING);\n    }\n  }\n\n  private setStatus(status: UltravoxSessionStatus) {\n    if (this._status === status) {\n      return;\n    }\n    this._status = status;\n    this.dispatchEvent(new UltravoxSessionStatusChangedEvent());\n  }\n\n  private handleDataReceived(payload: Uint8Array, _participant: any) {\n    const msg = JSON.parse(this.textDecoder.decode(payload));\n    this.dispatchEvent(new UltravoxDataMessageEvent(msg));\n    if (msg.type === 'state') {\n      const newState = msg.state;\n      if (newState === UltravoxSessionStatus.SPEAKING && this.agentSourceNode === undefined) {\n        // Skip the first speaking state, before we've attached the audio element.\n        // handleTrackSubscribed will be called soon and will change the state.\n        this.delayedSpeakingState = true;\n      } else {\n        this.setStatus(newState);\n      }\n    } else if (msg.type === 'transcript') {\n      const medium = msg.medium == 'voice' ? Medium.VOICE : Medium.TEXT;\n      const role = msg.role == 'agent' ? Role.AGENT : Role.USER;\n      const ordinal = msg.ordinal;\n      const isFinal = msg.final;\n      if (msg.text) {\n        this.addOrUpdateTranscript(ordinal, medium, role, isFinal, msg.text);\n      } else if (msg.delta) {\n        this.addOrUpdateTranscript(ordinal, medium, role, isFinal, undefined, msg.delta);\n      }\n    } else if (msg.type == 'client_tool_invocation') {\n      this.invokeClientTool(msg.toolName, msg.invocationId, msg.parameters);\n    } else if (this.experimentalMessages) {\n      this.dispatchEvent(new UltravoxExperimentalMessageEvent(msg));\n    }\n  }\n\n  private addOrUpdateTranscript(\n    ordinal: number,\n    medium: Medium,\n    speaker: Role,\n    isFinal: boolean,\n    text?: string,\n    delta?: string,\n  ) {\n    while (this._transcripts.length < ordinal) {\n      this._transcripts.push(null);\n    }\n    if (this._transcripts.length == ordinal) {\n      this._transcripts.push(new Transcript(text || delta || '', isFinal, speaker, medium));\n    } else {\n      const priorText = this._transcripts[ordinal]?.text || '';\n      this._transcripts[ordinal] = new Transcript(text || priorText + (delta || ''), isFinal, speaker, medium);\n    }\n    this.dispatchEvent(new UltravoxTranscriptsChangedEvent());\n  }\n\n  private invokeClientTool(toolName: string, invocationId: string, parameters: { [key: string]: any }) {\n    const tool = this.registeredTools.get(toolName);\n    if (!tool) {\n      this.sendData({\n        type: 'client_tool_result',\n        invocationId,\n        errorType: 'undefined',\n        errorMessage: `Client tool ${toolName} is not registered (TypeScript client)`,\n      });\n      return;\n    }\n\n    try {\n      const result = tool(parameters);\n      if (result instanceof Promise) {\n        result\n          .then((result) => this.handleClientToolResult(invocationId, result))\n          .catch((error) => this.handleClientToolFailure(invocationId, error));\n      } else {\n        this.handleClientToolResult(invocationId, result);\n      }\n    } catch (e) {\n      this.handleClientToolFailure(invocationId, e);\n    }\n  }\n\n  private handleClientToolResult(invocationId: string, result: any) {\n    if (typeof result === 'string') {\n      this.sendData({ type: 'client_tool_result', invocationId, result });\n    } else {\n      const resultString = result.result;\n      const responseType = result.responseType;\n      if (typeof resultString !== 'string' || typeof responseType !== 'string') {\n        this.sendData({\n          type: 'client_tool_result',\n          invocationId,\n          errorType: 'implementation-error',\n          errorMessage:\n            'Client tool result must be a string or an object with string \"result\" and \"responseType\" properties.',\n        });\n      } else {\n        this.sendData({ type: 'client_tool_result', invocationId, result: resultString, responseType });\n      }\n    }\n  }\n\n  private handleClientToolFailure(invocationId: string, error: any) {\n    this.sendData({\n      type: 'client_tool_result',\n      invocationId,\n      errorType: 'implementation-error',\n      errorMessage: error instanceof Error ? error.message : undefined,\n    });\n  }\n}\n"]}